// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String        @id @default(uuid())
    email         String        @unique
    name          String
    password      String
    accountStatus AccountStatus @default(REVIEWING)
    createdAt     DateTime      @default(now())
    OTP           OTP[]
    subscription  Subscription?
    promptQuota   PromptQuota?
    botConfigs    BotConfig[]
}

model BotConfig {
    id          String   @id @default(uuid())
    userId      String
    name        Bot
    theme       String
    description String?
    // model       String // e.g., "gpt-3.5-turbo"
    // temperature Float    @default(0.7)
    // maxTokens   Int      @default(1000)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])
}

model OTP {
    id        String   @id @default(uuid())
    userId    String
    code      String   @unique
    createdAt DateTime @default(now())
    expiresAt DateTime

    user User @relation(fields: [userId], references: [id])
}

model Subscription {
    id                 String    @id @default(uuid())
    userId             String    @unique
    plan               Plan      @default(FREE)
    startDate          DateTime  @default(now())
    endDate            DateTime?
    canceledAt         DateTime?
    currentPeriodStart DateTime  @default(now())
    currentPeriodEnd   DateTime
    status             String    @default("active")

    user User @relation(fields: [userId], references: [id])
}

model PromptQuota {
    id           String   @id @default(uuid())
    userId       String   @unique
    monthlyQuota Int // Total allowed messages per month based on plan
    usedQuota    Int      @default(0) // Messages used this month
    resetDate    DateTime // Next quota reset date
    lastUpdated  DateTime @default(now())

    user User @relation(fields: [userId], references: [id])
}

enum AccountStatus {
    REVIEWING
    APPROVED
    SUSPENDED
    REJECTED
}

enum Plan {
    FREE
    STARTER
    GROWTH
    PREMIUM
    ENTERPRISE
}

enum Bot {
    ZOIE
    OPTIMUS
    JARVIS
}
